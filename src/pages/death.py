"""
üìä Timeline interactive des d√©c√®s par ann√©e/mois.
‚ö∞Ô∏è Distribution des √¢ges au d√©c√®s (histogramme, boxplot).
üîÑ Ratio hommes/femmes au d√©c√®s.
‚è∞ R√©partition des heures de d√©c√®s (matin, apr√®s-midi, nuit).
üéÇ Centenaires recens√©s (liste, stats, courbes).

Note : beaucoup de donn√©es ont que al date de deces mais pas la date de naissance.
"""

import streamlit as st
import altair as alt
import plotly.graph_objects as go
import streamlit_shadcn_ui as ui

from src.utils import (dataset_load, aggregate_by_year, aggregate_by_gender_and_by_year,
                       top_and_down_death_year, average_death_age_by_year, death_age_histogram,
                       average_death_age_by_year_and_genre, death_by_season_month, death_by_month_chart,
                       death_by_day)

#data
death_load = dataset_load("liste_des_deces.csv")

# header
left,right = st.columns([1, 4])
logo = left.image(image="src/assets/rodez_logo_propre.png", width=150)
right.title("Exploration des d√©c√®s")

st.write("Le dataset des d√©c√®s est tr√®s l√©ger en terme de richesse des donn√©es.\n\n"
         "On notera cependant les √©lements suivant qui permettent : \n\n"
         "1) D'explorer temporellement les d√©c√®s sur les ann√©es, d'avoir un focus sur certaines p√©riodes travers√©es ou sur le genre \n"
         "2) D'effectuer une analyse des r√©partitions en fonctions des horaires \n"
         "3) D'avoir une focus sur certains indicateurs comme les centenaires par exemple")

st.divider()
st.markdown("""### 1. Timelines""")

st.markdown("""#### a. Vue g√©n√©rale""")

df = aggregate_by_year(death_load)
with st.container():
    st.bar_chart(df, x_label="Ann√©es", y_label="Nombre de naissances total")

st.write("#### Note\n"
         "On remarque les pics historique sur les ann√©es des deux grandes guerres mondiales mais √©galement apres "
         "la p√©riode des 30 glorieuses que le nombre de d√©c√®s ne cesse de croire. Une analyse crois√©e avec les naissances "
         "pourra expliquer cette tendance √† la hausse si la population vieillissante n'est pas renouvel√©e...")

st.markdown("""#### b. Vue par genres""")
dfg = aggregate_by_gender_and_by_year(death_load).reset_index()

fig = go.Figure()
for genre, color in zip(["F√©minin", "Masculin"], ["#FF69B4", "#1f77b4"]):
    fig.add_trace(go.Scatter(
        x=dfg["annee"],
        y=dfg[genre],
        mode='lines',
        line=dict(color=color, width=2),
        fill='tozeroy',
        name=genre,
        opacity=0.3
    ))
st.plotly_chart(fig, use_container_width=True)

st.write("#### Note\n"
         "La vue par genre n'est pas parfaite car beaucoup de lignes ne sont pas compl√®te et la pr√©cision du genre est "
         "plus pr√©sente dans le relev√© vers les ann√©es 2000...")
st.divider()
st.markdown("""### 2. Quelques indicateurs """)

result = top_and_down_death_year(death_load)
top, down = st.columns(2)

with top:
    ui.metric_card(
        title="üìä Ann√©e la plus haute",
        content=result["highest_year"]["year"],
        description=f"{result['highest_year']['value']} d√©c√®s"
    )


with down:
    ui.metric_card(
        title="üìâ Ann√©e la plus basse",
        content=result["lowest_year"]["year"],
        description=f"{result['lowest_year']['value']} d√©c√®s"
    )

st.write("""#### a. Histogramme de l'age moyen du d√©c√®s""")

st.info("""##### Note
Les donn√©es ici ne prennent pas en compte que les lignes compl√®tes avec date de d√©c√®s et de naissances!""")


year_range = st.slider(label="P√©riode √† s√©lectionner", min_value=1981, max_value=2016, value=(1981, 2016))
histo = death_age_histogram(death_load, 20, year_range)
st.bar_chart(histo)

st.write("""#### b. Esp√©rance de vie moyenne par ann√©e""")

df_av1 = average_death_age_by_year(death_load).reset_index()
df_av1.columns = ["annee", "age_deces_moyen"]

chart1 = alt.Chart(df_av1).mark_area(opacity=0.3).encode(
    x=alt.X("annee:O", title="Ann√©es"),
    y=alt.Y("age_deces_moyen:Q", title="√Çges moyen des d√©c√®s")
)

st.altair_chart(chart1, use_container_width=True)

st.write("""#### c. Esp√©rance de vie moyenne par ann√©e et par genre""")

df_av2 = average_death_age_by_year_and_genre(death_load).reset_index()

chart2 = alt.Chart(df_av2).mark_area(opacity=0.3).encode(
    x=alt.X("annee:O", title="Ann√©es"),  # ':O' = force ordinal axis -> no separator
    y=alt.Y("age_deces:Q", title="√Çge moyen au d√©c√®s", stack=None),
    color=alt.Color("genre:N", title="Genre",
                    scale=alt.Scale(
                        domain=["Masculin", "Feminin"],
                        range=["blue", "red"]
                        )
                    ),
    tooltip=["annee", "genre", "age_deces"]
).interactive()  # allow zoom

st.altair_chart(chart2, use_container_width=True)

st.write("""### 3. Analyses temporelle""")

st.write("""#### a. Analyses par mois sur la p√©riode compl√®te""")
df_plot = death_by_month_chart(death_load).reset_index()
df_plot.columns = ["Mois", "D√©c√®s"]

months = [
    "Janvier","F√©vrier","Mars","Avril","Mai","Juin",
    "Juillet","Ao√ªt","Septembre","Octobre","Novembre","D√©cembre"
]

chart = alt.Chart(df_plot).mark_bar().encode(
    x=alt.X("Mois:N", sort=months, title="Mois"),
    y=alt.Y("D√©c√®s:Q", title="Nombre de d√©c√®s"),
    tooltip=["Mois", "D√©c√®s"]
)

st.altair_chart(chart, use_container_width=True)

# deces par saisonnalit√© (hiver/√©t√©).
st.write("""#### b. Analyses par saison sur la p√©riode compl√®te""")

df_season = death_by_season_month(death_load)

df_plot1 = df_season.reset_index()
df_plot1.columns = ["Cat√©gorie", "D√©c√®s"]

# Color scale simple
chart = alt.Chart(df_plot1).mark_bar().encode(
    x=alt.X("Cat√©gorie:N", sort=df_plot1.index.tolist(), title=""),
    y=alt.Y("D√©c√®s:Q", title="Nombre de d√©c√®s"),
    color=alt.Color("D√©c√®s:Q", scale=alt.Scale(scheme="reds")),
    tooltip=["Cat√©gorie", "D√©c√®s"]
).properties(
    title="D√©c√®s par saison",
    width=600,
    height=400
)

st.altair_chart(chart, use_container_width=True)

#D√©c√®s par jour de la semaine
st.write("""#### c. Analyses par jours sur la p√©riode compl√®te""")

df_days = death_by_day(death_load)
df_plot3 = df_days.reset_index()
df_plot3.columns = ["Jour", "D√©c√®s"]

days_order = ["Lundi", "Mardi", "Mercredi", "Jeudi", "Vendredi", "Samedi", "Dimanche"]

# Cr√©er le line chart
chart3 = alt.Chart(df_plot3).mark_line(point=True, color="steelblue").encode(
    x=alt.X("Jour:N", sort=days_order, title="Jour de la semaine"),
    y=alt.Y("D√©c√®s:Q", title="Nombre de d√©c√®s"),
    tooltip=["Jour", "D√©c√®s"]
).properties(
    title="D√©c√®s par jour de la semaine",
    width=600,
    height=400
)

st.altair_chart(chart3, use_container_width=True)

#4. Genre
# Proportion des d√©c√®s par genre chaque ann√©e.
# Esp√©rance de vie hommes vs femmes.

# 5. Comparatifs
# Comparaison de l‚Äô√¢ge moyen au d√©c√®s sur diff√©rentes p√©riodes (ex. avant 1950 vs apr√®s 2000).

