import streamlit as st
import altair as alt
import streamlit_shadcn_ui as ui
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.graph_objects as go

from src.utils import (
    dataset_load,
    aggregate_by_year,
    top_year_and_down_year,
    wedding_by_month_chart,
    wedding_by_season_month,
    wedding_type_gender,
    wordcloud_jobs,
    average_wedding_age,
    average_age_wedding_by_gender,
    age_gap_between_spouses,
)

# data
wedding_set = dataset_load("liste_des_mariages.csv")

# header
left, right = st.columns([1, 4])
logo = left.image(image="src/assets/rodez_logo_propre.png", width=150)
right.title("Statistique et exploration des mariages")

st.write("""Le dataset des mariages propose des donn√©es plut√¥t parcellaire parfois ( de l'ordre ~ 10%) mais qui m√©rite 
que l'on s'y interesse de plus pr√®s.""")

st.divider()
st.markdown("""### 1. Timelines et indicateurs""")

st.markdown("""#### a. Indicateurs cl√©s""")
df = top_year_and_down_year(wedding_set)
top, down = st.columns(2)

with top:
    ui.metric_card(
        title=" üíê Ann√©e la plus haute",
        content=df["highest_year"]["year"],
        description=f"{df['highest_year']['value']} marriages",
    )


with down:
    ui.metric_card(
        title="ü§çAnn√©e la plus basse",
        content=df["lowest_year"]["year"],
        description=f"{df['lowest_year']['value']} d√©c√®s",
    )


st.markdown("""#### b. Vue globale sur le dataset""")
df2 = aggregate_by_year(wedding_set)
with st.container():
    st.bar_chart(df2, x_label="Ann√©es", y_label="Nombre de mariages total")

st.divider()
st.markdown("""### 2. R√©partitions temporelles""")


st.markdown("""#### a. Histogramme des mariages par mois entre 1981-2016""")
df_plot = wedding_by_month_chart(wedding_set).reset_index()
df_plot.columns = ["Mois", "Mariages"]

months = [
    "Janvier",
    "F√©vrier",
    "Mars",
    "Avril",
    "Mai",
    "Juin",
    "Juillet",
    "Ao√ªt",
    "Septembre",
    "Octobre",
    "Novembre",
    "D√©cembre",
]

chart = (
    alt.Chart(df_plot)
    .mark_bar()
    .encode(
        x=alt.X("Mois:N", sort=months, title="Mois"),
        y=alt.Y("Mariages:Q", title="Nombre de mariages"),
        tooltip=["Mois", "Mariages"],
    )
)

st.altair_chart(chart, use_container_width=True)

st.markdown("""#### b.Heatmap des mariages par saison et par ann√©e""")
df_season = wedding_by_season_month(wedding_set)

figure, axis = plt.subplots(figsize=(10, 5))
sns.heatmap(
    df_season,
    annot=False,  # pas de label de chiffre
    fmt="d",  # entier pas float
    cmap="YlOrRd",
    cbar_kws={"label": "Nombre de mariages"},
    ax=axis,
)
axis.set_title("Nombre de mariages par saison et ann√©e")
axis.set_xlabel("Ann√©es")
axis.set_ylabel("Saison")
st.pyplot(figure)


st.divider()

st.info("""On notera ici que les analyses suivants portent sur des donn√©es plut√¥t pauvres, elles repr√©sentent 
environ ~10% du dataset et donc l'analyse ne peut √™tre √©tendue sur la p√©riode complete.""")

st.markdown("""### 3. Dimensions d√©mographique""")
st.markdown(
    """#### a. Histogramme du d√©nombrement des types de couples pour les ann√©es post ann√©es 2010"""
)


st.write(""" Cette analyse ne prend en compte qu'une r√©f√©rence proche de 2013 car √† cette date, en France, la loi du 
'mariage pour tous' √† √©t√© promue. Officiellement donc, les couples LGBT sont autoris√©s √† se marier. On peut relever 
une apparition de ce type de donn√©es concernant les mariages de couples LGBT""")

type_gender = wedding_type_gender(wedding_set)
if "inconnu" in type_gender.columns:
    type_gender = type_gender.drop(columns=["inconnu"])
df_filtered = type_gender[type_gender["annee"] >= 2013]

df_filtered = df_filtered.rename(columns={"hetero": "Couples H√©t√©rosexuel", "lgbt": "Couples LGBT"})
fig = go.Figure()

# Couples H√©t√©ro
fig.add_trace(
    go.Bar(
        x=df_filtered["annee"],
        y=df_filtered["Couples H√©t√©rosexuel"],
        name="Couples H√©t√©rosexuel",
        marker_color="blue",
    )
)
# Couples LGBT
fig.add_trace(
    go.Bar(
        x=df_filtered["annee"],
        y=df_filtered["Couples LGBT"],
        name="Couples LGBT",
        marker_color="purple",
    )
)
# Mise en forme
fig.update_layout(
    barmode="group",
    title="√âvolution des types de couple depuis 2010",
    xaxis_title="Ann√©es",
    yaxis_title="Pourcentage de mariages",
    template="plotly_white",
)

st.plotly_chart(fig)
st.markdown("""#### b. Nuage de mots des professions""")
st.write(
    "Les professions sont pr√©sentes une partie du dataset et permet ici de les pr√©senter sous une forme"
    "moins analytique et conventionnel comme un nuage de mot."
)
job_epoux, job_epouse = st.columns(2)

wc = wordcloud_jobs(wedding_set, "profession_epoux")
fig_wc, axis_wc = plt.subplots(figsize=(10, 5))
axis_wc.imshow(wc, interpolation="bilinear")
axis_wc.axis("off")
job_epoux.pyplot(fig_wc)
job_epoux.write("Profession des '√©poux'")

wc2 = wordcloud_jobs(wedding_set, "profession_epouse")
fig_wc2, axis_wc2 = plt.subplots(figsize=(10, 5))
axis_wc2.imshow(wc2, interpolation="bilinear")
axis_wc2.axis("off")
job_epouse.pyplot(fig_wc2)
job_epouse.write("Profession des '√©pouses'")

st.divider()
st.markdown("""### 4. Quelques indicateurs optionnels""")

# age moyen au mariage ( homme versus femme)
st.markdown("""#### a. √âvolution de l'√¢ge moyen des √©poux/√©pouses entre 1981-2016""")
avg_age = average_wedding_age(wedding_set)
fig_avg_age = go.Figure()

# epoux
fig_avg_age.add_trace(
    go.Bar(
        x=avg_age["annee"],
        y=avg_age["age_moyen_epoux"],
        name="Age moyen des '√©poux'",
        marker_color="blue",
    )
)
# epouse
fig_avg_age.add_trace(
    go.Bar(
        x=avg_age["annee"],
        y=avg_age["age_moyen_epouse"],
        name="Age moyen des '√©pouses'",
        marker_color="pink",
    )
)
# Mise en forme
fig_avg_age.update_layout(
    barmode="group",
    xaxis_title="Ann√©es",
    yaxis_title="Ages moyen",
    template="plotly_white",
)

st.plotly_chart(fig_avg_age)

st.markdown("""#### b. Evolution de l'√¢ge moyen par des √©poux/√©pouses""")

age_counts = average_age_wedding_by_gender(wedding_set)
age_counts = (
    age_counts.reset_index()
    .melt(
        id_vars="index",
        value_vars=["√Çge √©poux", "√Çge √©pouse"],
        var_name="Genre",
        value_name="Nombre",
    )
    .rename(columns={"index": "√Çge"})
)

# Bar chart c√¥te √† c√¥te
age_counts_chart = (
    alt.Chart(age_counts)
    .mark_bar()
    .encode(
        x=alt.X("√Çge:O", title="√Çge au mariage"),
        y=alt.Y("Nombre:Q", title="Nombre de personnes"),
        color=alt.Color("Genre:N", scale=alt.Scale(scheme="set1")),
        xOffset="Genre:N",  # S√©pare les barres c√¥te √† c√¥te
    )
)

st.altair_chart(age_counts_chart, use_container_width=True)

st.markdown("""#### c. √âcart d‚Äô√¢ge absolu moyen et m√©dian des couples par ann√©e""")

# distribution des √©carts d'age entre conjoints
age_gap = age_gap_between_spouses(wedding_set)
age_gap_chart = (
    alt.Chart(age_gap)
    .mark_line(point=True)
    .encode(
        x=alt.X("annee:O", title="Ann√©es"),
        y=alt.Y("valeur:Q", title="√âcart d‚Äô√¢ge en ann√©es"),
        color=alt.Color("ecart_type:N", title="Statistique"),
        tooltip=["annee", "ecart_type", "valeur"],
    )
    .properties(width=700, height=400)
)
st.altair_chart(age_gap_chart, use_container_width=True)
